package com.myzaker.imagescan.Imageload;import java.io.File;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import com.myzaker.imagescan.ShowImageActivity;import com.myzaker.imagescan.bean.ImageBean;import com.myzaker.imagescan.bean.ImageFolderBean;import com.myzaker.imagescan.bean.TempDataController;import android.content.ContentResolver;import android.content.Context;import android.database.Cursor;import android.os.AsyncTask;import android.provider.MediaStore;import android.provider.MediaStore.Images.Thumbnails;public class LocalImageLoadTask extends AsyncTask<Void, Void, Void> {	boolean isCancel;	OnLocalImageLoadTaskListener onLocalImageLoadTaskListener;	Context context;	public LocalImageLoadTask(Context context) {		this.context = context;	}	public void setOnLocalImageLoadTaskListener(			OnLocalImageLoadTaskListener onLocalImageLoadTaskListener) {		this.onLocalImageLoadTaskListener = onLocalImageLoadTaskListener;	}	@Override	protected void onPreExecute() {		super.onPreExecute();		if (onLocalImageLoadTaskListener != null) {			onLocalImageLoadTaskListener.onStart();		}	}	@Override	protected void onPostExecute(Void result) {		super.onPostExecute(result);		if (isCancel) {			return;		}		if (onLocalImageLoadTaskListener != null) {			onLocalImageLoadTaskListener.onEnd();		}	}	@Override	protected Void doInBackground(Void... params) {		ContentResolver mContentResolver = context.getContentResolver();		HashMap<Integer, String> mThumbnails = new HashMap<Integer, String>();		String[] projection = { Thumbnails._ID, Thumbnails.IMAGE_ID,				Thumbnails.DATA };		Cursor cur = mContentResolver.query(Thumbnails.EXTERNAL_CONTENT_URI,				projection, null, null, null);		if (cur != null && cur.moveToFirst()) {			int image_id;			String image_path;			int image_idColumn = cur.getColumnIndex(Thumbnails.IMAGE_ID);			int dataColumn = cur.getColumnIndex(Thumbnails.DATA);			do {				image_id = cur.getInt(image_idColumn);				image_path = cur.getString(dataColumn);				mThumbnails.put(image_id, image_path);			} while (cur.moveToNext());		}		Cursor mCursor = mContentResolver.query(				MediaStore.Images.Media.EXTERNAL_CONTENT_URI, null,				MediaStore.Images.Media.MIME_TYPE + "=? or "						+ MediaStore.Images.Media.MIME_TYPE + "=?",				new String[] { "image/jpeg", "image/png" },				"date_modified DESC");		while (mCursor.moveToNext()) {			int _id = mCursor.getInt(mCursor					.getColumnIndex(MediaStore.Images.Media._ID));			String path = mCursor.getString(mCursor					.getColumnIndex(MediaStore.Images.Media.DATA));			// String thumbMagic =			// mCursor.getString(mCursor.getColumnIndex(MediaStore.Images.Media.MINI_THUMB_MAGIC));			String parentName = new File(path).getParentFile().getName();			ImageBean mImageItem = new ImageBean();			mImageItem.setImgId(_id);			mImageItem.setThumbnailPath(mThumbnails.get(_id));			// PhotoItem.setThumbailPath(thumbMagic);			mImageItem.setImagePath(path);			if (!TempDataController.isFolderInRecord(parentName)) {				ImageFolderBean mImageFolderBean = new ImageFolderBean();				mImageFolderBean.setFolderName(parentName);				mImageFolderBean.setTopImagePath(path);				TempDataController.addFolderBean(mImageFolderBean);				TempDataController.addImageDataBean(parentName, mImageItem);			} else {				TempDataController.addImageDataBean(parentName, mImageItem);			}		}		mCursor.close();		return null;	}	@Override	protected void onCancelled() {		super.onCancelled();		isCancel = true;		if (onLocalImageLoadTaskListener != null) {			onLocalImageLoadTaskListener.onCancel();		}	}	public interface OnLocalImageLoadTaskListener {		public void onStart();		public void onEnd();		public void onCancel();	}}