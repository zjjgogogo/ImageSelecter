package com.test.imagedemo;import android.animation.Animator;import android.animation.AnimatorListenerAdapter;import android.animation.Keyframe;import android.animation.LayoutTransition;import android.animation.ObjectAnimator;import android.animation.PropertyValuesHolder;import android.content.Context;import android.util.AttributeSet;import android.view.Gravity;import android.view.View;import android.widget.BaseAdapter;import android.widget.HorizontalScrollView;import android.widget.ImageView;import android.widget.LinearLayout;import com.nineoldandroids.animation.Animator.AnimatorListener;public class PicsShowView extends HorizontalScrollView {	LinearLayout mContainer;	int maxPicNum = 6;	OnClickListener mDeleteClickListener;	OnClickListener mAddClickListener;	OnClickListener mItemClickListener;	AnimatorListener mAnimatorListener;	Animator defaultAppearingAnim, defaultDisappearingAnim;	Animator defaultChangingAppearingAnim, defaultChangingDisappearingAnim;	Animator customAppearingAnim, customDisappearingAnim;	Animator customChangingAppearingAnim, customChangingDisappearingAnim;	Animator currentAppearingAnim, currentDisappearingAnim;	Animator currentChangingAppearingAnim, currentChangingDisappearingAnim;	boolean isMoveing = false;	public void setDeleteClickListener(OnClickListener mDeleteClickListener) {		this.mDeleteClickListener = mDeleteClickListener;	}	public void setAddClickListener(OnClickListener mAddClickListener) {		this.mAddClickListener = mAddClickListener;	}	public void setItemClickListener(OnClickListener mItemClickListener) {		this.mItemClickListener = mItemClickListener;	}	public void setAnimatorListener(AnimatorListener mAnimatorListener) {		this.mAnimatorListener = mAnimatorListener;	}	public PicsShowView(Context context, AttributeSet attrs) {		super(context, attrs);		init();	}	public PicsShowView(Context context) {		this(context, null);	}	protected void init() {		mContainer = new LinearLayout(getContext());		LayoutParams param = new LayoutParams(LayoutParams.WRAP_CONTENT,				LayoutParams.WRAP_CONTENT);		// param.gravity = Gravity.CENTER_HORIZONTAL;		addView(mContainer, param);		initAnimation();	}	public void setMaxPicNum(int num) {		this.maxPicNum = num;	}	public void initAnimation() {		final LayoutTransition transitioner = new LayoutTransition();		mContainer.setLayoutTransition(transitioner);		defaultAppearingAnim = transitioner				.getAnimator(LayoutTransition.APPEARING);		defaultDisappearingAnim = transitioner				.getAnimator(LayoutTransition.DISAPPEARING);		defaultChangingAppearingAnim = transitioner				.getAnimator(LayoutTransition.CHANGE_APPEARING);		defaultChangingDisappearingAnim = transitioner				.getAnimator(LayoutTransition.CHANGE_DISAPPEARING);//		createCustomAnimations(transitioner);		currentAppearingAnim = defaultAppearingAnim;		currentDisappearingAnim = defaultDisappearingAnim;		currentChangingAppearingAnim = defaultChangingAppearingAnim;		currentChangingDisappearingAnim = defaultChangingDisappearingAnim;	}	private void createCustomAnimations(LayoutTransition transition) {		// Changing while Adding		PropertyValuesHolder pvhLeft = PropertyValuesHolder.ofInt("left", 0, 1);		PropertyValuesHolder pvhTop = PropertyValuesHolder.ofInt("top", 0, 1);		PropertyValuesHolder pvhRight = PropertyValuesHolder.ofInt("right", 0,				1);		PropertyValuesHolder pvhBottom = PropertyValuesHolder.ofInt("bottom",				0, 1);		PropertyValuesHolder pvhScaleX = PropertyValuesHolder.ofFloat("scaleX",				1f, 0f, 1f);		PropertyValuesHolder pvhScaleY = PropertyValuesHolder.ofFloat("scaleY",				1f, 0f, 1f);		customChangingAppearingAnim = ObjectAnimator.ofPropertyValuesHolder(				this, pvhLeft, pvhTop, pvhRight, pvhBottom, pvhScaleX,				pvhScaleY).setDuration(				transition.getDuration(LayoutTransition.CHANGE_APPEARING));		customChangingAppearingAnim.addListener(new AnimatorListenerAdapter() {			public void onAnimationEnd(Animator anim) {				View view = (View) ((ObjectAnimator) anim).getTarget();				view.setScaleX(1f);				view.setScaleY(1f);			}		});		// Changing while Removing		Keyframe kf0 = Keyframe.ofFloat(0f, 0f);		Keyframe kf1 = Keyframe.ofFloat(.9999f, 360f);		Keyframe kf2 = Keyframe.ofFloat(1f, 0f);		PropertyValuesHolder pvhRotation = PropertyValuesHolder.ofKeyframe(				"rotation", kf0, kf1, kf2);		customChangingDisappearingAnim = ObjectAnimator				.ofPropertyValuesHolder(this, pvhLeft, pvhTop, pvhRight,						pvhBottom, pvhRotation)				.setDuration(						transition								.getDuration(LayoutTransition.CHANGE_DISAPPEARING));		customChangingDisappearingAnim				.addListener(new AnimatorListenerAdapter() {					public void onAnimationEnd(Animator anim) {						View view = (View) ((ObjectAnimator) anim).getTarget();						view.setRotation(0f);					}				});		// Adding		customAppearingAnim = ObjectAnimator				.ofFloat(null, "rotationY", 90f, 0f).setDuration(						transition.getDuration(LayoutTransition.APPEARING));		customAppearingAnim.addListener(new AnimatorListenerAdapter() {			public void onAnimationEnd(Animator anim) {				View view = (View) ((ObjectAnimator) anim).getTarget();				view.setRotationY(0f);			}		});		// Removing		customDisappearingAnim = ObjectAnimator.ofFloat(null, "rotationX", 0f,				90f).setDuration(				transition.getDuration(LayoutTransition.DISAPPEARING));		customDisappearingAnim.addListener(new AnimatorListenerAdapter() {			public void onAnimationEnd(Animator anim) {				View view = (View) ((ObjectAnimator) anim).getTarget();				view.setRotationX(0f);			}		});	}	public void setAdapter(BaseAdapter mBaseAdapter) {		mContainer.removeAllViews();		final int count = mBaseAdapter.getCount();		for (int i = 0; i < count; i++) {			View view = mBaseAdapter.getView(i, null, null);			view.findViewById(R.id.btn_delete).setTag(i);			view.findViewById(R.id.btn_delete).setOnClickListener(					mDeleteClickListener);			view.setTag(i);			view.setOnClickListener(mItemClickListener);			mContainer.addView(view, Math.min(1, mContainer.getChildCount()),					generateLayoutParams());		}		if (mContainer.getChildCount() < maxPicNum) {			ImageView mImageView = new ImageView(getContext());			mImageView.setImageResource(R.drawable.add_pic_btn);			mImageView.setOnClickListener(mAddClickListener);			mContainer.addView(mImageView, generateLayoutParams());		}		updateChildsTag();	}	public void removeView(int position) {		View view = mContainer.getChildAt(position);		mContainer.removeView(view);		mContainer.requestLayout();		updateChildsTag();	}	protected void updateChildsTag() {		final int count = mContainer.getChildCount();		for (int i = 0; i < count; i++) {			View view = mContainer.getChildAt(i);			view.setTag(i);			View delelete = view.findViewById(R.id.btn_delete);			if (delelete != null) {				delelete.setTag(i);			}		}	}	protected android.widget.LinearLayout.LayoutParams generateLayoutParams() {		int itemWidth = getResources().getDimensionPixelSize(				R.dimen.pic_item_width);		int itemHeight = getResources().getDimensionPixelSize(				R.dimen.pic_item_height);		int itemPadding = getResources().getDimensionPixelSize(				R.dimen.pic_item_padding);		android.widget.LinearLayout.LayoutParams mLayoutParams = new android.widget.LinearLayout.LayoutParams(				itemWidth, itemHeight, 1);		mLayoutParams.leftMargin = itemPadding;		mLayoutParams.rightMargin = itemPadding;		return mLayoutParams;	}}